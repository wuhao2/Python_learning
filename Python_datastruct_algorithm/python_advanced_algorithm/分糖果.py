# _*_ coding: utf-8 _*_
__author__ = 'bobby'
__data__ = '2017/6/9 20:05 '
"""
问题描述:
10个小孩围城一圈分糖果，老师分给第1个小孩10块，第2个小孩2块，第3个小孩8块，第4个小孩22块，第5个小孩16块，
第6个小孩4块，第7个小孩10块，第8个小孩6块，第9个小孩14块，第10个小孩20块。
然后所有的小孩同时将手中的糖分一半给右边的小孩；糖块数为奇数的人可向老师要一块。

问经过这样几次后大家手中的糖的块数一样多？ 每人各有多少块糖？
"""
#解题思路：
#    1.用列表存储当前小朋友的糖果数.
#    2.模拟糖果传递过程, (s[i-1] + s[i]) / 2
#    3.判断是否全相等

def fun():
    s = [10, 2, 8, 22, 16, 4, 10, 6, 14, 20]
    count = 0
    #先把框架搭好，定义循环条件为True，
    #如果s中的所有元素都等于是s[0]即第一个元素，则退出while循环
    while not all([x == s[0] for x in s]):  #all(1，1，1，0)函数返回false，只有全部为1时才返回True
        s = [int((s[i -1] + s[i])/2) for i in range(10)]#所有的小孩同时将手中的糖分一半给右边的小孩，满足 前一个小孩的一半 + 自己的一半 == 小孩当前的糖果数
        s = [(x+x%2) for x in s] #当x为奇数数，(x+x%2)相当于x+1, 当x为偶数，(x+x%2)相当于x+0；  糖块数为奇数的人可向老师要一块
        count += 1

    print(count,s)

#test
fun()
# 16 [18, 18, 18, 18, 18, 18, 18, 18, 18, 18]