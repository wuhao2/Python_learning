# _*_ coding: utf-8 _*_
__author__ = 'wuhao'
__date__ = '2017/9/5 10:27'
# 加密的方式：在ASCII的基础上 + 密钥的值
"""
对称密钥（Symmetric-key algorithm）  --- DES  AES   RC5 RC6
又称为共享密钥加密，对称密钥在加密和解密的过程中使用的密钥是相同的，
常见的对称加密算法有DES、3DES、AES、RC5、RC6。
对称密钥的优点是计算速度快，但是他也有缺点，密钥需要在通讯的两端共享，
让彼此知道密钥是什么对方才能正确解密，如果所有客户端都共享同一个密钥，
那么这个密钥就像万能钥匙一样，可以凭借一个密钥破解所有人的密文了，
如果每个客户端与服务端单独维护一个密钥，那么服务端需要管理的密钥将是成千上万，
这会给服务端带来噩梦。下面就是一个简单的对称加密，将明文加密成ASCII。
"""
def encipher(plain_text, key):
    # 加密
    cipher_text = []
    for c in plain_text:
        cipher_text.append(str(ord(c) + key))

    return ' '.join(cipher_text)

def decipher(cipher_text, key):
    # 解密
    plain_text = []
    for c in cipher_text.split(" "):
        plain_text.append(chr(int(c)+key))
    return "".join(plain_text)
"""
密码(cipher)
密码学中的密码（cipher）和我们日常生活中所说的密码不太一样，计算机术语『密码 cipher』是一种用于加密或者解密的算法，
而我们日常所使用的『密码 password』是一种口令，它是用于认证用途的一组文本字符串，这里我们要讨论的是前者：cipher。

密钥(key)
密钥是一种参数，它是在使用密码（cipher）算法过程中输入的参数。
同一个明文在相同的密码算法和不同的密钥计算下会产生不同的密文。很多知名的密码算法都是公开的，
密钥才是决定密文是否安全的重要参数，通常密钥越长，破解的难度越大，
比如一个8位的密钥最多有256种情况，使用穷举法，能非常轻易的破解，知名的DES算法使用56位的密钥，
目前已经不是一种安全的加密算法了，
主要还是因为56位的密钥太短，在数小时内就可以被破解。密钥分为对称密钥与非对称密钥。

明文（plaintext）
是加密之前的原始数据，密文是通过密码（cipher）运算后得到的结果成为密文（ciphertext）
"""
if __name__ == '__main__':
    print ("cipher_text:", encipher("abcdef", 0))
    print ("plain_text:", decipher("97 98 99 100 101 102", 0))

"""
密码学在计算机科学中使用非常广泛，HTTPS就是建立在密码学基础之上的一种安全的通信协议。
HTTPS早在1994年由网景公司首次提出，而如今在众多互联网厂商的推广之下HTTPS已经被广泛使用在各种大小网站中。
在完全理解HTTPS之前，有必要弄清楚一些密码学相关的概念，
比如：明文、密文、密码、密钥、对称加密、非对称加密、摘要、数字签名、数字证书。
"""

"""
非对称密钥  ---RSA

非对称密钥（public-key cryptography），又称为公开密钥加密，服务端会生成一对密钥，一个私钥保存在服务端，仅自己知道，
另一个是公钥，公钥可以自由发布供任何人使用。客户端的明文通过公钥加密后的密文需要用私钥解密。
非对称密钥在加密和解密的过程的使用的密钥是不同的密钥，加密和解密是不对称的，
所以称之为非对称加密。与对称密钥加密相比，非对称加密无需在客户端和服务端之间共享密钥，
只要私钥不发给任何用户，即使公钥在网上被截获，也无法被解密，仅有被窃取的公钥是没有任何用处的。
常见的非对称加密有RSA，非对称加解密的过程：

服务端生成配对的公钥和私钥
私钥保存在服务端，公钥发送给客户端
客户端使用公钥加密明文传输给服务端
服务端使用私钥解密密文得到明文
"""
