# _*_ coding: utf-8 _*_
__author__ = 'bobby'
__data__ = '2017/6/9 11:35 '
#220的真因数之和为：1+2+4+5+10+22+44+55+110=284
#284的真因数之和为：1+2+4+71+142 = 220
#220和284互为相亲数，即220的真因数之和为284，284的真因数之和为220----毕达哥拉斯
#求100000以内的相亲数

#定义一个字典,浪费点空间，用来将曾今求和过s放到字典中
cache = {}#缓存机制，节约时间

def sumOfFactors(n):#真因数之和
    res = cache.get(n,0)
    if res:
        return res
    a = 1
    b = n
    s = 0
    while a<b:
        if n%a == 0:
            s += a+b
        a += 1
        b = int(n/a)
    if a == b and n == a*b:
        s += a

    cache[n] = s -n
    return s-n #得到真因数之和

#用来检测，优化后的代码，比优化前的快
import time
t1 = time.time()
#穷举法，找相亲数
for x in  range(2,100000):
    y = sumOfFactors(x)
    if x<y and x == sumOfFactors(y):#此处要x<y优化，消除重复
        print( x , y)
t2 = time.time()
print("spented time:", t2-t1)#无cache：9.74330735206604    有cache:8.523106813430786



        #得到如下结果，但是效率不高，大量的因子求和操作，所以需要优化，节省时间，就需要浪费点空间
        # 220
        # 284
        # 1184
        # 1210
        # 2620
        # 2924
        # 5020
        # 5564
        # 6232
        # 6368

#不加x<y,则出现下列情况
# 6 6
# 28 28
# 220 284
# 284 220
# 496 496
# 1184 1210
# 1210 1184
# 2620 2924
# 2924 2620
# 5020 5564
# 5564 5020
# 6232 6368
# 6368 6232
# 8128 8128